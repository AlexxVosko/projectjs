
// --------------------------------------------------------------------------------//
// 1) Какие из методов массивов возвращают новый массив в результате своей работы?

//Ответ
    // filter, map, slice

// --------------------------------------------------------------------------------//
// 2) Сколько аргументов может быть у функции?

//Ответ
    //Сколько угодно
    // Реальный базовый вопрос с собеседований. Аргументов может быть бесконечно много. (в пределах памяти, конечно же)

// --------------------------------------------------------------------------------//
// 3) Что выведет этот код:

    let y = 1; 
    let x = y = 2; 
    alert(x);

//Ответ
  // 2

// --------------------------------------------------------------------------------//
// 4) Что будет выведено в консоль в результате работы функции?
 
    function getSum(a, b) {
        function sum() {
            console.log(this.a);
            return a + b;
        }
    
        console.log(sum());
    }
    
    getSum(4, 5);

//Ответ
    // Ничего, будет ошибка
    //В данном случае sum - это обычная функция, контекст вызова которой будет undefined (за счет установленного 'use strict';). 
    //Отсюда, this.a превращается в undefined.a, что приводит к ошибке.

// --------------------------------------------------------------------------------//
// 5) Что будет выведено в консоль?

    if (0) {
        console.log('first')
    } else if (NaN) {
        console.log('second');
    } else if (' ') {
        console.log('third');
    } else if (null) {
        console.log('fourth');
    }

//Ответ
    //'third'
    //Не забывайте про те сущности, которые в логическом контексте будут false. 
    //А вот строка с пробелом - это уже true, так как содержит 1 символ.
// --------------------------------------------------------------------------------//
// 6) Какой результат работы функции combineUrls в данном случае?

    combineUrls('https', 'mysite.com');
    
    const combineUrls = (protocol, domain) => {
        return `${protocol}://${domain}`;
    }

//Ответ
    // ReferenceError
    //Обратите внимание на то, что такой способ написания функции - это function expression.
    //А это значит, что она создается только в тот момент, как до неё дойдет код. 
    //Поэтому ответом будет ошибка ссылочного типа (ReferenceError). 
    //Невозможно использовать то, чего еще не существует в коде.

// --------------------------------------------------------------------------------//
// 7) Как отменить стандартное поведение браузера при работе со ссылками, формами и тп?

//Ответ
    // event.preventDefault();
    //Один из самых важных методов при работе с формами и ссылками. Забудете про него - и нужный функционал не получится.

// --------------------------------------------------------------------------------//
// 8) Какой из команд можно создать элемент на странице?

//Ответ
    //document.createElement('div');


// --------------------------------------------------------------------------------//
// 9) Как правильно задать наследование одного класса от другого?

//Ответ
    // class Slider extends Element {}

// --------------------------------------------------------------------------------//
// 10) У вас есть функция, которая скрывает номер телефона и имя пользователя до определенного действия. Эта функция выглядит вот так:

    const msgd = 'My number +12345678, name: Oleg';
    function transformMsg(str) {
        // Пропущенная часть
        return b;
    }
    transformMsg(msgd)
    //Результатом вызова этой функции сейчас будет:
    //My number *****, hidden
    //Какой код подходит на место пропущенной части функции?

//Ответ
    //let ad = str.replace(/\+\d{8}/,'*****');
    //let bd = ad.replace(/\w{4}:\s\w{1,}/,'hidden');

    //Сила регулярных выражений в том, что им все равно, какое имя или номер телефона будет использоваться.
    // Они найдут и поменяют их на нужные значения.

// --------------------------------------------------------------------------------//
// 11) Какой формат экспорта/импорта ES6 модулей в JS записан синтаксически правильно?     

//Ответ
    //export function sum(a,b){
        //console.log(a+b);
    //}
    //import {sum} from './somefiale.js'

    // Система экспортов/импортов очень важна в разработке реальных сайтов и приложений. 
    // Она позволяет разбивать ваш код на маленькие и удобные кусочки по назначению и дальше по курсу мы много раз еще будем её применять.

// --------------------------------------------------------------------------------//
//12) Какой итоговый результат мы получим в консоли, если запустить этот код?
'use strict';
const promisify = (item, delay) =>
    new Promise(resolve => setTimeout(() => resolve(item), delay));
 
const a = () => promisify('a', 100);
const b = () => promisify('b', 5000);
const c = () => promisify('c', 3000);
 
async function one() {
    const promises = [a(), b(), c()];
    const [outpu1, outpu2, outpu3] = await Promise.all(promises);
    return `one is done: ${outpu1} ${outpu2} ${outpu3}`;
}
 
async function two() {
    const promises = [a(), b(), c()];
    const outpu1 = await Promise.race(promises);
    return `two is done: ${outpu1}`;
}
 
async function three() {
    const outpu1 = await a();
    const outpu2 = await b();
    const outpu3 = await c();
    return `three is done: ${outpu1} ${outpu2} ${outpu3}`
}
 
one().then(console.log);
two().then(console.log);
three().then(console.log);

//Ответ
    // two is done: a
    // one is done: a b c
    // three is done: a b c

    // Это классическая задача на промисы. 
    //Внимательно смотрите на команды race() и all(), а так же на наличие async/await.
    // Именно на понимание их работы и направлена данная задача.
// --------------------------------------------------------------------------------//

// 13) Что будет результатом выполнения этого кода на странице?
    const msg = 'Заявка №231';
    
    const div = document.createElement('div');
    div.style.background = 'red';
    div.setAttribute('data-msg', true);
    div.textContent(msg);
    
    document.body.append(div);

//Ответ
    // Произойдет ошибка
    //div.textContent is not a function

    // Обратите внимание на то, что textContent - это свойство блока, его текстовый контент. 
    // Это не функция. Поэтому и использовать его нужно вот так:
    //div.textContent = msg;
    //Отсюда и возникнет ошибка.

// --------------------------------------------------------------------------------//

// 14) Правда ли что a == b ?
    a = [1, 2, 3]; b = [1, 2, 3];

//Ответ
    //Нет, это два разных массива с одинаковым содержимым

    // Всегда помните про то, что каждый объект в js уникален. 
    // Даже если у них будет одинаковое содержимое, то это все равно разные объекты. 
    // А еще стоит помнить тему передачи данных по ссылке или по значению.

// --------------------------------------------------------------------------------//

// 15) Какой из вариантов получения этого элемента со страницы будет правильным?
    <div id="hi">Hello</div>

//Ответ
    document.querySelector('#hi');

    // Не забывайте, что правильное получение элементов - это важный навык. 
    // Селектор, где мы указываем # применяется только в командах querySelector и querySelectorAll , 
    // а для получения одного элемента подходит только первая из этих команд.

// --------------------------------------------------------------------------------//

// 16) Как называется прием из кода ниже?

    const user = {
        name: 'Alex',
        age: 25
    }
    const {name, age} = user;
//Ответ
    //Деструктуризация
    // Деструктуризация - это важный прием, не забывайте про него. Особенно, когда начнем работать с большими данными.

// --------------------------------------------------------------------------------//

// 17) Какой результат даст этот код?

    0 || 1
    0 && 1
    0 || NaN || false || null

//Ответ
    //1 0 null

// --------------------------------------------------------------------------------//

// 18) Какое значение будет выведено в консоль при выполнении этого кода?

    let cd = 4;
    function addX(x) {
    return function(n) {
        return n + x
    }
    }
    
    const addThree = addX(3);
    
    let d = addThree(cd);
    let res = addThree(cd);
    
    console.log(res)

//Ответ
    //7

    // Это небольшая задачка на замыкание функций. Обратите внимание на то, что х при вызове функции addX(3), 
    // сохраняется в замыкании возвращаемой функции. И теперь, каждый раз при вызове новой функции мы будем добавлять к тройке указанный аргумент.

// --------------------------------------------------------------------------------//

// 19) Event loop - это...

//Ответ
    //Механизм контроля очереди вызовов функций и коллбэков, таймаутов и других асинхронных операций.

    // Событийный цикл и его определение - это не особо сложная задача. Главное держать перед глазами ту схему его работы, которую мы с вами разбирали.

// --------------------------------------------------------------------------------//

// 20)  Микрозадачи в событийном цикле - это...

//Ответ
    //действия, которые создаются промисами и await. Включают в себя .then/catch/finally

    // Это важное понятие, которое часто спрашивают на собеседованиях. Не забывайте про разницу между макро- и микрозадачами

// --------------------------------------------------------------------------------//

// 21) Что будет содержаться в переменной result после завершения кода?

    function foo(a,b) {
        const [first, second] = a;
        const {eng, ru} = b;
    
        return `${second}, ${ru}`;
    }
    
    const result = foo(['Hello', 'Привет'], {ru: 'Мир', eng: 'World'});

//Ответ
    //Привет, Мир

    // Не забывайте про прием деструктуризации, мы его будем очень часто использовать дальше по курсу.

// --------------------------------------------------------------------------------//

// 22) Что такое объект события?

//Ответ
    //Это объект, который содержит всю информацию о произошедшем событии

// --------------------------------------------------------------------------------//

// 23) Какая основная проблема этого кода?

    async function makeRequest() {
        return await fetch('https://jsonplaceholder.typicode.com/todos/1')
            .then(json => console.log(json))
    }
    
    makeRequest()

//Ответ
    // Нет преобразования ответа от сервера из json в формат обычного объекта.
    // Из-за этого в консоль будет выведен необработанный промис.

    // Не забывайте, что запрос при помощи fetch дает нам промис, который еще нужно обработать. В данном случае правильный код будет выглядеть:

    async function makeRequest() {
        return await fetch('https://jsonplaceholder.typicode.com/todos/1')
        .then(response => response.json())
        .then(json => console.log(json))
    }

    makeRequest()

// --------------------------------------------------------------------------------//

// 24) Какой командой можно удалить элемент со страницы?

//Ответ
    div.remove()

// --------------------------------------------------------------------------------//

// 25) Какой из методов безопаснее всего использовать, если мы четко хотим получить от пользователя текст и использовать его дальше?

//Ответ
    //textContent
  
    // Это один из вопросов на собеседованиях по безопасности, важно помнить.

// --------------------------------------------------------------------------------//

// 26) Что будет содержаться в переменной result в результате работы кода?

    const arr = [
        {
            name: 'Alex',
            salary: 500
        },
        {
            name: 'Ann',
            salary: 1500
        },
        {
            name: 'John',
            salary: 2500
        },
    ];
    
    const result2 = arr.map(item => Object.entries(item)[1][1]).reduce((sum, curr) => sum + curr)
    console.log(result2)

//Ответ
    //4500

// --------------------------------------------------------------------------------//

// 27) Код ниже работает без ошибки. Но опытный разработчик считает его плохим. В чем причина?

    const price = 500;
    const money = 400;
    
    switch (true) {
        case price > money:
            console.log('Мне не хватает денег');
        case price < money:
            console.log('Мне хватает денег!');
    }

//Ответ
    // Отсутствует блок кода default
    // После каждого случая нет ключевого слова break
    // Конструкция switch/case предназначена только для строгого сравнения

// --------------------------------------------------------------------------------//

// 28) Что будет выведено в консоль в результате работы функции?

    function setOptions(height, width, ...additional) {
        console.log(height, width, ...additional)
    }
    setOptions(400, 500, 'red', 'top');

//Ответ
    //400 500 'red' 'top'

    // Обратите внимание на spread-оператор при выводе в консоль

// --------------------------------------------------------------------------------//

// 29) Какого метода не существует у свойства classList?

//Ответ
    // .includes()

// --------------------------------------------------------------------------------//

// 30) Что выведет в консоль данный код?

    const promise = new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('foo');
        }, 1000);
        setTimeout(() => {
            reject('bar');
        }, 900);
    });
    
    promise.then((value) => {
        console.log(value);
    }).catch((e) => console.log(e))

//Ответ
    // 'bar'

    // Обратите внимание на то, что reject запускается быстрее, чем resolve. 
    // Это значит, что код из блока catch выполняется и на этом работа промиса окончена. 
    // А в консоль выводится как раз то сообщение, которое было передано в эту функцию.
    // P.S. foo/bar - это классические названия в программировании для описания каких-либо тестовых сущностей, когда мы не знаем их точного имени.

// --------------------------------------------------------------------------------//