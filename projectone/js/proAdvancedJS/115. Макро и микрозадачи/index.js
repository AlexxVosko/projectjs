'use strict';

// Макро и микротаски

// Callback Queue - очередь макро задач
// Сразу после каждой макрозадачи будь то синхронный или асинхронный код 
// движок  выполняет ВСЕ очереди из МИКРОзадач перед тем как выполнить следующую макрозадачу

// Микрозадачи формируются внутри при методах - then(), catch(), finally() и оператора await


//(1)
setTimeout( () =>console.log('timeout'));

//(2)
// ручной способ указания что промис выполнился в положительную сторону
Promise.resolve()
    .then(()=>console.log('promise'));

//Запуск микрозадач вручную до рендеринга страницы queueMicrotask
queueMicrotask(()=>console.log('wow'));

Promise.resolve()
    .then(()=>console.log('promise_2'));

//(3)
console.log('code');

// Первым выполниться синхронный код (3) (потомму что синхронный код)
// Втором выполнится (2) - так как микрозадачи хоть и асинхронный код
// и третим (1)
// queueMicrotask выполнится между двумя промисами

// Цепочка
// Запускается какое то действие ()=>{} (макрозадача)
// microtasks: then/catch/finally/await
// render (перерисовка страницы)
// Запускается следующая макро задача  ()=>{}

// Это дает гарантию что общее окружение страницы остается одним и тем же между микрозадачами
// не изменены координаты мыши, не получены новые данные по сети


