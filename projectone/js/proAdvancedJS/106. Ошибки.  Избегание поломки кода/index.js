
'use strict';

// Ошибки не всегда связаны с плохим качеством разработки
// они могут появляться при блокировке какого то функционала браузером или провайдером

// Обработка ошибок - конструкция try / catch
// в конструкции try - помещается действие которое нужно выполнить
// в конструкции catch - передается аргумент (е), служит для отлова ошибок и что то с ними делать
// аргумент - объект ошибки

// Когда скрипт видит конструкцию try / catch
// вначале он берет весь код в блоке try и выполняет его - если все ок то catch игнорируется
// если нет то перемещаемся в блок catch 

//!код после данной конструкции также будет работать - тем самым скрипт не оборвется на ошибке

// также можно дописать блок кода finally после catch
// работает так же как и в промисах - выполнится абсолютно всегда
// завершить операции при любом варианте развитии событий


try {
    console.log('Normal');
} catch(e) {
    console.log('error');
} 

try {
    console.log('Normal');
    console.log(a);
    console.log('result');
} catch(error) {
    console.log(error); // ReferenceError: a is not defined
    // в объекте ошибке идет 3 сущности
    console.log(error.name); // ReferenceError - название ошибки
    console.log(error.mess);  // a is not defined - сообщение ошибки
    console.log(error.stack); // какие функции привели к этой ошибке
} finally {

}
console.log('Still normal');


//!! -- Что делать когда в скриптах при обращении к страницам, в одних есть найденые элементы, в других нет???
// если элементы найдены то выполнять функционал - если нет то выбрасываем catch
try{
    document.querySelector('.active').addEventListener('click', ()=>{
        console.log('click');
    });
} catch(e){
    console.log('Not defined');
}

console.log('normal');