'use strict';

// Прием модуль - используется для того чтобы скрыть внутренние детали реализации скрипта
// программы нужно делить на модули для удобного понимая

// Преимущества
//1) Модули по своей структуре самодостаточны и независимы
    //хорошо разработныый модуль не зависит от другого кода и может быть легко изменен или вообще удален
//2) обеспечивают чистоту глобального пространства
    // создание переменных заносятся в глобальную зону видимости (не рекоммендуется)
    // глобальных переменных должно быть как можно меньше
//3)  помогают избегать конфликтных ситуаций с одинаковыми именами переменных
    // все данные модуля существуют только в его области видимости

// пример
// при подключении сторонней библиотеки название переменной может совпадать с текущим файлом скрипта
// в результате получим ошибку что переменная уже объявлена

// -- Способы создания модулей через нативную реализацию -- //

// 1) Использование анонимной самовызывающийся функции
    //позволяет написать код, сразу запустить и получить локальную область видимости
    // зачем оборачивать во внешние скобки () ? - потому что получим function declaration (ошибку)
    // так как такая функция не может быть анонимной
    // при обертывании функция превращается в function expression
const number = 1;

(function(){
    let number = 2;
    console.log(number); // 2
    console.log(number+3); // 5
}());

console.log(number); // 1 

// 2) Использование объектного интерфейса
    // модуль записывается в переменную и в нее ворзвращаем методы доступные снаружи

const user = (function(){
    // доступа к функции нет так как лежит в локальной области видимости
    const privat = function(){
        console.log('I am privat!');
    }

    // из анонимной функции возвращаем объект
    return {
        sayHello:privat
    };
}());

user.sayHello(); // I am privat!