
// MutationObserver -  отслеживание изменения самих элементов
// ResizeObserver -  отслеживание изменения размеров элемента



// Изменения могут быть вызваны скриптом (курс валют)

//  html-аттрибут contenteditable="true"
// позволяет менять что то внутри html

'use strict';

const box = document.querySelector('.box');

// в объект передавать callback-функцию которая будет происходить после того произойдет какое то изменение элемента
//mutationRecords - список изменений

// объект следящий за чем-то
let observer = new MutationObserver(mutationRecords =>{
    console.log(mutationRecords); // [MutationRecord] - массив с объектом данных об изменении элемента
});

//2 аргумента (1 - сам элемент, 2 - объект,конфигурация с теми настройками за которыми на нужно следить внутри элемента)
observer.observe(box,{
    childList:true
});

// Алгоритм работы
// 1 - выбирается элемент за которым будем следить
// 2 - выбираем за какими конкретно изменениями будем следить
// 3 - в функции обработчике указываем какие действия будем предпринимать
//если изменились такие-то узлы то  выполняются такие то действия

//1) MutationObserver срабатывает уже после изменения на элементе (не во время)
//2) Это все асинхронная операция

// есои больше не нужно следить за элементом 
observer.disconnect();

// если удаляется элемент то и observer не оставит на него ссылки , конструкция будет очищена

