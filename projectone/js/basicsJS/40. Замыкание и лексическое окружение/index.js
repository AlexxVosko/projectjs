// Функции создаются до того как выполнится скрипт построчно (Function Declaration)

// -- Лексическое окружение  (Lexical environment)
//JS у каждой выполняемой функции блока кода и скрипта, есть связанные с ними внутренний (скрытый) объект
//! Внутренний технический скрытый объект
// ! Любая переменная - свойство объекта лексического окружения
// может существовать внутри любых скобок { },  функции, циклы


//1) Внутреннее ЛО (environment record)
// Объект в котором как св-ва хранятся все локальные переменные этой функции + this
// Объект с внутренней частью лексического окружения  этой функции
// в консоли разработчика
// Sources -> Scope -> Local

//2) Внешнее ЛО
// соответствие коду снаружи функции
// в консоли разработчика
// Sources -> Scope -> Script

'use strict';
let number1 = 5;
function logNumber(){
    console.log(number1); // ссылка на переменную, не значение
}
number1 = 6;
logNumber(); // 6 
number1 = 8;
logNumber(); debugger //8

// Функция ссылается на локальную переменную
// Замыкания - функция пытается найти переменные внутри себя, если нет, обращается к переменным более глобально
// у локального объекта есть ссылка на глобальный
// когда функция заканчивает свою работу, ее лексическое окружение уничтожается за ненадобностью
// каждый вызов функции - создание нового лексического окружения
let number = 5; debugger
function logNumber(){
    let number =4; debugger
    console.log(number); 
}
number = 6;
logNumber(); debugger // 4

//Function expression (функция помещается внутрь переменной)
function createCounter(){ //(ссылка на лексическое окружение) по  скрытому свойству invirement
    let counter = 0;
    const newFunc = function (){ // когда функция создается она хранит в себе ссылки на переменные которые были ей доступны во время создания 
        counter= counter+1; //  создается замыкание (на что будет ссылаться) 
        return counter;    
    }
    return newFunc;
}

const increment = createCounter();
const c1 = increment(); //1
const c2 = increment(); //2
const c3 = increment(); //3


console.log(c1,c2,c3);

// Замыкание - функция которая запоминает свои внешние переменные и может получить к ним доступ
{
    let msg = 'Hello';
}
console.log(msg); // ошибка, msg is not defined
// так как доступна внутри лексического окружения { }  и не доступна снаружи

// -- Цикл в цикле

for (let i=0; i<9;i++){
    for (let j=0; j<9;j++){
        let num =3;
    }
}

//  Почему не доступна num?
console.log(num);
// потому что находится внутри лексического окружения второго цикла и только там
