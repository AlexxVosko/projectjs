
// Компоненты - блоки пользовательского интерфейса которые могут иметь собственное поведение
    // подстветка активности и т/д
    // самостоятельные единицы / структурные блоки приложения которые могут переиспользоваться и в других файлах
// Элементы - структурные частички компонентов 
    // не изменяемые могут быть только пересозданы и заново помещены на страницу
    // после рендера нельзя изменить класс или аттрибут тегов

// Главное правило у React компонентов
//1) они должны быть написаны с большой буквы
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
        <App />
    );

// App.js
import logo from './logo.svg'; // импорт лого
import './App.css';
//пример с классом
import React from 'react';
// синтаксис деструктуризации
import {Component} from 'react';

// Реаки компонент  - функции которые могут возвращать JSX  элементы
// !!компонент App

const Header = () =>{
    return <h2>Hello!</h2>
};
// Чтобы использовать компонент его нужно где то вызвать
// Компонент можно помещать 2-мя способами
// простой вызов <Header/>
// с помещение структуры <Header></Header> вкладывание


const Field = () =>{
    const holder = 'Enter here';
    const styleField ={
        width:'300px'
    };
    return <input 
            placeholder={holder} 
            type="text" 
            style={styleField}/>
};

// классы в JS  это функции обернутые в оболочку 
// Компоненты Реакта могут быть классами
// -- Классовый подход

// необходимо наследовать какой то класс из Реакта
// в таких классах должен быть один главный метод render()
 class Field2 extends Component{
    render (){
        const holder = 'Enter here';
        const styleField ={
            width:'300px'
        };

        return <input 
                placeholder={holder} 
                type="text" 
                style={styleField}/>
    }
 }

 

//  В {} - Можно передавать не только переменные но и вывод функции и другие элементы и выражения и логические условия (тернарный опреатор)
// но стандартные условие if() else - не будет работать, такие лучше делать выше по коду
function Btn() {
    const txt = 'Log in';
    const res = () =>{
        return 'Log in';
    };
    const p  = <p>Log in</p>;
    //return <button>{res()}</button>
    const logged = true;
    return <button>{logged ? 'Enter' : txt}</button>
};


function App() {
  return (
    <div className="App">
        <Header/>
        <Field/>
        <Btn/>
    </div>
  );
}

export default App;

// По какому принципу формировать компоненты?
// Если компонент можно переиспользовать в другой части приложения или существующий компонент стал слишком большим

// Основное правило использования компонентов
// мы можем и должны писать их в разных файлах и экспортировать и импортировать для удобного использования

export {Header}; //  экспорт функции

// в другом файле 
import {Header} from './App';



