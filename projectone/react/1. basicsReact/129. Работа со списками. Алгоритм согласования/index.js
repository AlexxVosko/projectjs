
// Все стандартно

// Приходит массив с данными с сервера 
// в компонентах формируем верстку на основании данных

// Каждый элемент списка должен иметь свой ключ (key) - иначе будет выдоваться предупреждение

// Алгоритм согласования (реконсиляции)(сверка) - нужен для оптимизаци скорости алгоритма работы приложения

// при изменении родительского тега на другой тип - все дочерние тоже будут уничтожены и созданы заново
// при изменении в родителе класса или дата аттрибута - будет изменяться только сам элемент

// Реакт сохраняет копию предыдущего дерева элементов и компонентов 
// но при этом сохраняет и новое дерево которое должно быть построено
// все это происходит в Virtual DOM дереве

// Затем идет сравнение каждого элемента друг с другом 
// если Реакт находит различия то измененные элементы будут создавать мутацию (перерисовку элемента) в реальном DOM дереве на реальной странице
// Реакт изменит только только изменившиейся элементы, остальные будут не тронуты

// Но если идет алгоритм одинаковых сотруднинков
// как он поймет что он изменился? ведь сравнение идет по порядку
// для этого и нужен аттрибут (key) для задания уникальности

// Ключи нужны только для списков


/// 
// Реакт изменяет только те элементы которые изменились
// в этом ему помогает алгоритм согласования
// использовать аттрибут key


function App(){

    const data = [
      {name: 'Alex Vosko' , salary: '13000', increase: true, id:1},
      {name: 'Max Smith' , salary: '800', increase: false, id:2},
      {name: 'Andy Curtel' , salary: '2000', increase: false, id:3},
    ];

    return (
        <div className="app">
            <AppInfo />

            <div className="search-panel">
              <SearchPanel/>
              <AppFilter/>
            </div>

            <EmployeesList data={data}/>
            <EmployeesAddForm/>
        </div>
    );
}


const EmployeesList = ({data}) => {

    // перебор массива и создание необходимого компонента
    const elements= data.map(item => {
        // вытащить св-во id, а остальные записать в itemProps
        const {id, ...itemProps} = item; // деструктуризация по остаточному принципу
        return (
            <EmployeesListItem key={id} {...itemProps} /> 
        )
    });

    return (
        <ul className="app-list list-group">
            {elements}
        </ul>
    )
}


