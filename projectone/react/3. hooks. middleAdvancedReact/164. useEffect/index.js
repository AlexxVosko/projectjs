
// useEffect - хук по работе с эффектами
// Эффекты - Операции по загрузке данных/ использование сторонних модулей/ запуск таймаутов/ логирование/ изменение DOM структуры


// операций по типу запросов на сервер/ таймаутов и эффектов не должно быть 
//- в конструкторе классового компонента
//- в методе render()

//импорт в файл
import {useEffect} from 'react';

// хук useEffect принимает в себя коллбэк функцию которая будет вызываться 
// вызываться - когда компонент отрендерился
//!!! также будет вызываться каждый раз когда компонент обновляется
// 2-м аргументом передается массив зависимостей
// необходим для отлова измененного состояния
// Если ни одна из зависимотей не изменилось то эффект будет пропущен

useEffect(()=>{
    document.title = `Slide: ${slide}`;
}, [slide]);

// c помощью пустого массива [] в качестве второго аргумента можно эмулировать componentDidMount

// useEffect - объединяет в себе 3 хука жизненного цикла componentDidMount , componentDidUpdate и componentWillUnmount
// принцип хуков построен на  JS замыканиях так как переменные остаются в области видимости

// Желательно создавать каждый новый useEffect на каждое действие 

// -----
// Подписка - термин в который входят таймауты/ обработчики событий через API браузера/ создание соединений между сервисами -
// все то что может существовать длительное время и обмениваться информацией с компонентом
// Все подписки необходимо удалять при удалении компонента

// в классовом компоненте это делается с помощью хука ЖЦ componentWillUnmount
// в useEffect это реализуется с помощью возвращения коллбэк функции из него

function logging(){
    console.log('log!');
}

useEffect(()=>{
    document.title = `Slide Update: ${slide}`;
    window.addEventListener('click',logging);
    return () =>{
        window.removeEventListener('click',logging);
    }
}, [slide]);


