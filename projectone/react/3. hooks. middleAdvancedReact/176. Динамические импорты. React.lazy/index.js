
// Динамические импорта подгрузка чего-то по требованию
// внутри условия
// Позволяет решить проблему загрузки информации только когда это действительно нужно

// 
// Диннамический импорт всегда возвращает промис
// с объектом модуля

// Этот промис нужно обработать как только файл подгрузился
// Любой экспорт создает объект


if(loading){
    //запуск функции
    import ('./someFunc')
           .then(obj => obj.logger())
           .catch()
}

// можно подгрузить несколько функций из файла
// использовать асинхронный синтаксис деструктуризации

const onCharListLoaded = async (char) =>{
    const {logger , seconLog} = await import ('./someFunc');
    logger();
}

// при экспорте функций по умолчанию она будет лежать в default
if(loading){
    //запуск функции
    import ('./someFunc')
           .then(obj => obj.default())
           .catch()
}

// Ленивая подгрузка компонентов в React - React.lazy
// React.lazy -  загружает компонент в bundle только тогда когда компонент будет впервые отрендерин
// Такие комопненты должны быть экспортированы по умолчанию

// Все динамические импорты вставляются после статических

import Page404 from '../pages/404';
const  Page404 = lazy( () => import('../pages/404') );

// Использовать компонент Саспенс (Suspense) - который будет отвечать за ошибки в импортах
// и отображения запасного содержимого
// Обертка
// принимает в себя один обязательный аргумент
// fallback - запасной компонент который можно показать пока грузится импорт
// можнопоместить как реакт компонент/ реакт элемент
<Suspense fallback={<span>Loading...</span>}>
       <Routes>
            <Route path="/" element={<MainPage />} />
            <Route path="*" element={<Page404 />} />
       </Routes>
</Suspense>
 //<Suspense fallback={<Spinner/>}></Suspense>

 //!! Такая оптимизация не ведет к тому что становится меньше кода по размеру
 // Более того при build файлов js (chunk) станет больше
 // Но дело не в весе а в правильности работы приложения так как грузится намного меньше 
 // участков кода 

 // Лениво можно загружать не только страницы нои компоненты